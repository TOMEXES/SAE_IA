import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image
from tensorflow.keras.losses import MeanSquaredError
import tensorflow as tf
import streamlit as st

st.write(f"‚úÖ TensorFlow version: {tf.__version__}")


# Charger les mod√®les une seule fois avec les bons noms de fichiers
@st.cache_resource
def load_models():
    """Charge tous les mod√®les de pr√©diction avec les bons fichiers."""
    import tensorflow as tf
	# Charger le mod√®le compatible avec TF 2.13
    model_age = tf.keras.models.load_model("modelAge_fixed.h5", compile=False)

    model_gender = tf.keras.models.load_model("my_modelGenre2.keras")  # Ton mod√®le de genre
    model_age_gender = tf.keras.models.load_model("best_age_genre_model.h5", compile=False)
    
    return model_age, model_gender, model_age_gender

# Charger les mod√®les
model_age, model_gender, model_age_gender = load_models()

def preprocess_image(image, target_size=(224, 224), grayscale=True):
    """Pr√©pare l'image pour les pr√©dictions."""
    image = image.resize(target_size)
    if grayscale:
        image = image.convert("L")  # Grayscale
        img_array = np.array(image) / 255.0
        img_array = img_array.reshape(1, target_size[0], target_size[1], 1)  # Ajouter batch et canal
    else:
        image = image.convert("RGB")  # Pour d'autres mod√®les utilisant RGB
        img_array = np.array(image) / 255.0
        img_array = img_array.reshape(1, target_size[0], target_size[1], 3)
    return img_array

# Interface Streamlit
st.title("Pr√©diction d'√¢ge et de genre par IA")
st.write("Chargez une image de visage pour obtenir les pr√©dictions.")

# Upload d'image
uploaded_image = st.file_uploader("T√©l√©chargez une image", type=["jpg", "png", "jpeg"])

if uploaded_image is not None:
    image = Image.open(uploaded_image)
    st.image(image, caption="Image charg√©e", use_column_width=True)

    # Choix du mod√®le
    option = st.radio("Choisissez le mod√®le :", ("√Çge", "Genre", "√Çge et Genre"))

    if st.button("Pr√©dire"):
        if option == "√Çge":
            img_gray = preprocess_image(image, target_size=(224,224), grayscale=True)
            age_pred = model_age.predict(img_gray)[0][0]
            st.success(f"üìå **√Çge pr√©dit** : {int(age_pred)} ans")

        elif option == "Genre":
            img_gray = preprocess_image(image, target_size=(224,224), grayscale=True)
            gender_pred = model_gender.predict(img_gray)[0][0]
            gender_text = "Homme" if gender_pred < 0.5 else "Femme"
            st.success(f"üìå **Genre pr√©dit** : {gender_text}")

        elif option == "√Çge et Genre":
            img_gray = preprocess_image(image, target_size=(96,96), grayscale=True)
            
            age_pred, gender_pred = model_age_gender.predict(img_gray)
            # Convertir les valeurs en scalaires
            age_pred = age_pred[0][0]  # √Çge
            gender_pred = gender_pred[0][0]  # Genre
            # D√©terminer le genre (seuil de 0.5)
            gender_text = "Homme" if gender_pred < 0.5 else "Femme"
            # Afficher les r√©sultats
            st.success(f"üìå **√Çge pr√©dit** : {int(age_pred)} ans")
            st.success(f"üìå **Genre pr√©dit** : {gender_text}")